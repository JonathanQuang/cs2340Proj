declare const messages: {
    upToDate: string;
    folderInSync: string;
    nothingToInstall: string;
    resolvingPackages: string;
    checkingManifest: string;
    fetchingPackages: string;
    linkingDependencies: string;
    rebuildingPackages: string;
    buildingFreshPackages: string;
    cleaningModules: string;
    bumpingVersion: string;
    savingHar: string;
    answer: string;
    usage: string;
    installCommandRenamed: string;
    globalFlagRemoved: string;
    waitingInstance: string;
    waitingNamedInstance: string;
    offlineRetrying: string;
    internalServerErrorRetrying: string;
    clearedCache: string;
    couldntClearPackageFromCache: string;
    clearedPackageFromCache: string;
    packWroteTarball: string;
    helpExamples: string;
    helpCommands: string;
    helpCommandsMore: string;
    helpLearnMore: string;
    manifestPotentialTypo: string;
    manifestBuiltinModule: string;
    manifestNameDot: string;
    manifestNameIllegalChars: string;
    manifestNameBlacklisted: string;
    manifestLicenseInvalid: string;
    manifestLicenseNone: string;
    manifestStringExpected: string;
    manifestDependencyCollision: string;
    manifestDirectoryNotFound: string;
    verboseFileCopy: string;
    verboseFileLink: string;
    verboseFileSymlink: string;
    verboseFileSkip: string;
    verboseFileSkipSymlink: string;
    verboseFileSkipHardlink: string;
    verboseFileRemoveExtraneous: string;
    verboseFilePhantomExtraneous: string;
    verboseFileSkipArtifact: string;
    verboseFileFolder: string;
    verboseRequestStart: string;
    verboseRequestFinish: string;
    configSet: string;
    configDelete: string;
    configNpm: string;
    configPika: string;
    couldntFindPackagejson: string;
    couldntFindMatch: string;
    couldntFindPackageInCache: string;
    couldntFindVersionThatMatchesRange: string;
    chooseVersionFromList: string;
    moduleNotInManifest: string;
    moduleAlreadyInManifest: string;
    unknownFolderOrTarball: string;
    unknownPackage: string;
    unknownPackageName: string;
    unknownUser: string;
    unknownRegistryResolver: string;
    userNotAnOwner: string;
    invalidVersionArgument: string;
    invalidVersion: string;
    requiredVersionInRange: string;
    packageNotFoundRegistry: string;
    requiredPackageNotFoundRegistry: string;
    doesntExist: string;
    missingRequiredPackageKey: string;
    invalidAccess: string;
    invalidCommand: string;
    invalidGistFragment: string;
    invalidHostedGitFragment: string;
    invalidFragment: string;
    invalidPackageName: string;
    invalidPackageVersion: string;
    couldntFindManifestIn: string;
    shrinkwrapWarning: string;
    npmLockfileWarning: string;
    lockfileOutdated: string;
    lockfileMerged: string;
    lockfileConflict: string;
    ignoredScripts: string;
    missingAddDependencies: string;
    yesWarning: string;
    networkWarning: string;
    flatGlobalError: string;
    noName: string;
    noVersion: string;
    answerRequired: string;
    missingWhyDependency: string;
    bugReport: string;
    unexpectedError: string;
    jsonError: string;
    noPermission: string;
    noGlobalFolder: string;
    allDependenciesUpToDate: string;
    legendColorsForVersionUpdates: string;
    frozenLockfileError: string;
    fileWriteError: string;
    fileDeleteError: string;
    multiplePackagesCantUnpackInSameDestination: string;
    incorrectLockfileEntry: string;
    invalidResolutionName: string;
    invalidResolutionVersion: string;
    incompatibleResolutionVersion: string;
    pikaOutdated: string;
    pikaOutdatedInstaller: string;
    pikaOutdatedCommand: string;
    tooManyArguments: string;
    tooFewArguments: string;
    noArguments: string;
    ownerRemoving: string;
    ownerRemoved: string;
    ownerRemoveError: string;
    ownerGetting: string;
    ownerGettingFailed: string;
    ownerAlready: string;
    ownerAdded: string;
    ownerAdding: string;
    ownerAddingFailed: string;
    ownerNone: string;
    teamCreating: string;
    teamRemoving: string;
    teamAddingUser: string;
    teamRemovingUser: string;
    teamListing: string;
    distFailed: string;
    distExiting: string;
    distContinuing: string;
    cleaning: string;
    cleanCreatingFile: string;
    cleanCreatedFile: string;
    cleanAlreadyExists: string;
    cleanRequiresForce: string;
    cleanDoesNotExist: string;
    binLinkCollision: string;
    linkCollision: string;
    linkMissing: string;
    linkRegistered: string;
    linkRegisteredMessage: string;
    linkUnregistered: string;
    linkUnregisteredMessage: string;
    linkUsing: string;
    linkDisusing: string;
    linkDisusingMessage: string;
    linkTargetMissing: string;
    createInvalidBin: string;
    createMissingPackage: string;
    workspacesAddRootCheck: string;
    workspacesRemoveRootCheck: string;
    workspacesFocusRootCheck: string;
    workspacesRequirePrivateProjects: string;
    workspacesSettingMustBeArray: string;
    workspacesDisabled: string;
    workspacesNohoistRequirePrivatePackages: string;
    workspacesNohoistDisabled: string;
    workspaceRootNotFound: string;
    workspaceMissingWorkspace: string;
    workspaceMissingCommand: string;
    workspaceUnknownWorkspace: string;
    workspaceVersionMandatory: string;
    workspaceNameMandatory: string;
    workspaceNameDuplicate: string;
    cacheFolderSkipped: string;
    cacheFolderMissing: string;
    cacheFolderSelected: string;
    execMissingCommand: string;
    noScriptsAvailable: string;
    noBinAvailable: string;
    dashDashDeprecation: string;
    commandNotSpecified: string;
    binCommands: string;
    possibleCommands: string;
    commandQuestion: string;
    commandFailedWithCode: string;
    commandFailedWithSignal: string;
    packageRequiresNodeGyp: string;
    nodeGypAutoInstallFailed: string;
    foundIncompatible: string;
    incompatibleEngine: string;
    incompatibleCPU: string;
    incompatibleOS: string;
    invalidEngine: string;
    optionalCompatibilityExcluded: string;
    optionalModuleFail: string;
    optionalModuleScriptFail: string;
    optionalModuleCleanupFail: string;
    unmetPeer: string;
    incorrectPeer: string;
    selectedPeer: string;
    missingBundledDependency: string;
    savedNewDependency: string;
    savedNewDependencies: string;
    directDependencies: string;
    allDependencies: string;
    foundWarnings: string;
    foundErrors: string;
    savedLockfile: string;
    noRequiredLockfile: string;
    noLockfileFound: string;
    invalidSemver: string;
    newVersion: string;
    currentVersion: string;
    noVersionOnPublish: string;
    manualVersionResolution: string;
    manualVersionResolutionOption: string;
    createdTag: string;
    createdTagFail: string;
    deletedTag: string;
    deletedTagFail: string;
    gettingTags: string;
    deletingTags: string;
    creatingTag: string;
    whyStart: string;
    whyFinding: string;
    whyCalculating: string;
    whyUnknownMatch: string;
    whyInitGraph: string;
    whyWhoKnows: string;
    whyDiskSizeWithout: string;
    whyDiskSizeUnique: string;
    whyDiskSizeTransitive: string;
    whySharedDependencies: string;
    whyHoistedTo: string;
    whyHoistedFromSimple: string;
    whyNotHoistedSimple: string;
    whyDependedOnSimple: string;
    whySpecifiedSimple: string;
    whyReasons: string;
    whyHoistedFrom: string;
    whyNotHoisted: string;
    whyDependedOn: string;
    whySpecified: string;
    whyMatch: string;
    uninstalledPackages: string;
    uninstallRegenerate: string;
    cleanRemovedFiles: string;
    cleanSavedSize: string;
    configFileFound: string;
    configPossibleFile: string;
    npmUsername: string;
    npmPassword: string;
    npmEmail: string;
    npmOneTimePassword: string;
    loggingIn: string;
    loggedIn: string;
    notRevokingEnvToken: string;
    notRevokingConfigToken: string;
    noTokenToRevoke: string;
    revokingToken: string;
    revokedToken: string;
    loginAsPublic: string;
    incorrectCredentials: string;
    incorrectOneTimePassword: string;
    twoFactorAuthenticationEnabled: string;
    clearedCredentials: string;
    publishFail: string;
    publishPrivate: string;
    published: string;
    publishing: string;
    nonInteractiveNoVersionSpecified: string;
    nonInteractiveNoToken: string;
    infoFail: string;
    malformedRegistryResponse: string;
    registryNoVersions: string;
    cantRequestOffline: string;
    requestManagerNotSetupHAR: string;
    requestError: string;
    requestFailed: string;
    tarballNotInNetworkOrCache: string;
    fetchBadHashWithPath: string;
    fetchBadIntegrityAlgorithm: string;
    fetchErrorCorrupt: string;
    errorExtractingTarball: string;
    updateInstalling: string;
    hostedGitResolveError: string;
    unknownFetcherFor: string;
    downloadGitWithoutCommit: string;
    downloadHTTPWithoutCommit: string;
    unplugDisabled: string;
    plugnplayWindowsSupport: string;
    packageInstalledWithBinaries: string;
    packageHasBinaries: string;
    packageHasNoBinaries: string;
    packageBinaryNotFound: string;
    couldBeDeduped: string;
    lockfileNotContainPattern: string;
    integrityCheckFailed: string;
    noIntegrityFile: string;
    integrityFailedExpectedIsNotAJSON: string;
    integrityCheckLinkedModulesDontMatch: string;
    integrityFlagsDontMatch: string;
    integrityLockfilesDontMatch: string;
    integrityFailedFilesMissing: string;
    integrityPatternsDontMatch: string;
    integrityModulesFoldersMissing: string;
    integritySystemParamsDontMatch: string;
    packageNotInstalled: string;
    optionalDepNotInstalled: string;
    packageWrongVersion: string;
    packageDontSatisfy: string;
    lockfileExists: string;
    pikaManifestExists: string;
    noManifestExists: string;
    skippingImport: string;
    importFailed: string;
    importResolveFailed: string;
    importResolvedRangeMatch: string;
    importSourceFilesCorrupted: string;
    importPackageLock: string;
    importYarnLock: string;
    importNodeModules: string;
    packageContainsPikaAsGlobal: string;
    watchStarting: string;
    watchRunning: string;
    watchRebuild: string;
    watchError: string;
    noValidationErrors: string;
    validationErrors: string;
    scopeNotValid: string;
    deprecatedCommand: string;
    deprecatedListArgs: string;
    implicitFileDeprecated: string;
    unsupportedNodeVersion: string;
    verboseUpgradeBecauseRequested: string;
    verboseUpgradeBecauseOutdated: string;
    verboseUpgradeNotUnlocking: string;
    verboseUpgradeUnlocking: string;
    folderMissing: string;
    mutexPortBusy: string;
    auditRunning: string;
    auditSummary: string;
    auditSummarySeverity: string;
    auditCritical: string;
    auditHigh: string;
    auditModerate: string;
    auditLow: string;
    auditInfo: string;
    auditResolveCommand: string;
    auditSemverMajorChange: string;
    auditManualReview: string;
    auditRunAuditForDetails: string;
    auditOffline: string;
};
export declare type LanguageKeys = keyof typeof messages;
export default messages;
